// Generated by CoffeeScript 1.6.3
/**@license kidomi 0.3
    Copyright (c) 2013 Zaur Nasibov, http://znasibov.info and http://github.com/basicwolf
    Distributed under the MIT license
*/


(function() {
  var addAttributes, appendChildren, extractNode, isArray, isObject, isString, kidomi, makeElementFromTagData, parseTagToken;

  window['kidomi'] = kidomi = function(data) {
    var childElem, elem, node, subArr, subElemStartIndex, tagData, tagToken, token, _i, _len, _ref;
    node = extractNode(data);
    if (node != null) {
      return node;
    }
    if (!isArray(data)) {
      throw "Kidomi error: expected an array, got: " + data;
    }
    if (data.length === 0) {
      throw 'Kidomi error: expected a non-empty array';
    }
    tagToken = data[0];
    if (isArray(tagToken)) {
      return (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          elem = data[_i];
          _results.push(kidomi(elem));
        }
        return _results;
      })();
    }
    tagData = parseTagToken(tagToken);
    elem = makeElementFromTagData(tagData);
    if (data.length === 2) {
      token = data[1];
      if (!isObject(token)) {
        childElem = kidomi(token);
      } else {
        addAttributes(elem, token);
        childElem = kidomi('');
      }
      appendChildren(elem, childElem);
    } else if (data.length >= 3) {
      subElemStartIndex = 1;
      if (isObject(data[1])) {
        addAttributes(elem, data[1]);
        subElemStartIndex = 2;
      }
      _ref = data.slice(subElemStartIndex);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        subArr = _ref[_i];
        childElem = kidomi(subArr);
        appendChildren(elem, childElem);
      }
    }
    return elem;
  };

  kidomi.extractNode = extractNode = function(obj) {
    if (obj instanceof Node) {
      return obj;
    } else if (isString(obj)) {
      return document.createTextNode(obj);
    } else if (typeof obj === 'number') {
      return document.createTextNode('' + obj);
    } else {
      return null;
    }
  };

  kidomi.makeElementFromTagData = makeElementFromTagData = function(tagData) {
    var elem;
    if (tagData.name === '') {
      throw "Kidomi error: empty tag name in " + data;
    }
    elem = document.createElement(tagData.name);
    if (tagData.id !== '') {
      elem.id = tagData.id;
    }
    if (tagData.classes.length > 0) {
      elem.className = tagData.classes.join(' ');
    }
    return elem;
  };

  kidomi.addAttributes = addAttributes = function(elem, data) {
    var classString, name, styleItems, styleString, val;
    if (data.style != null) {
      styleString = (function() {
        var _ref;
        if (isString(data.style)) {
          return data.style;
        } else {
          styleItems = [];
          _ref = data.style;
          for (name in _ref) {
            val = _ref[name];
            styleItems.push("" + name + ": " + val + ";");
          }
          return styleItems.join(' ');
        }
      })();
      elem.style.cssText = styleString;
    }
    if (data["class"] != null) {
      classString = isArray(data["class"]) ? data["class"].join(' ') : data["class"];
      if (elem.className != null ? elem.className : elem.className = '') {
        elem.className += ' ';
      }
      elem.className += classString;
    }
    for (name in data) {
      val = data[name];
      if (name !== 'class' && name !== 'style') {
        elem.setAttribute(name, val);
      }
    }
  };

  kidomi.parseTagToken = parseTagToken = function(tagToken) {
    var classSplitData, tagId, tagName, tagNameAndId, tagNameAndIdSplit, _ref;
    classSplitData = tagToken.split('.');
    tagNameAndId = classSplitData.shift();
    tagNameAndIdSplit = tagNameAndId.split('#');
    tagName = tagNameAndIdSplit[0];
    tagId = (_ref = tagNameAndIdSplit[1]) != null ? _ref : '';
    return {
      name: tagName,
      id: tagId,
      classes: classSplitData
    };
  };

  kidomi.appendChildren = appendChildren = function(parent, childElem) {
    var el, _i, _len;
    if (isArray(childElem)) {
      for (_i = 0, _len = childElem.length; _i < _len; _i++) {
        el = childElem[_i];
        parent.appendChild(el);
      }
    } else {
      parent.appendChild(childElem);
    }
  };

  kidomi.isArray = isArray = function(arr) {
    return arr instanceof Array;
  };

  kidomi.isString = isString = function(s) {
    return typeof s === 'string' || s instanceof String;
  };

  kidomi.isObject = isObject = function(obj) {
    return (obj != null ? obj.constructor : void 0) === Object;
  };

}).call(this);

/*
//@ sourceMappingURL=kidomi.map
*/
